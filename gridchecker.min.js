class GridChecker extends HTMLElement{constructor(a){super(),this.columns=null,this.gridWidth=null,this.columnWidth=null,this.gapWidth=null,this.offsetX="0",this.offsetY="0",this.zIndex="1000000",this.color="rgba(200, 50, 200, .4)",this.key="g",this.debug=!1,this.renderAmount=0,this.isListeningToAttributes=!1,this.shadow=this.attachShadow({mode:"open"}),a&&this.createElement(a)}static get observedAttributes(){return GridChecker.attributes}attributeChangedCallback(a,b,c){this.isListeningToAttributes&&this.attributesAreValid()&&this.setProperty(a,c)}connectedCallback(){this.init(),this.isListeningToAttributes=!0;this.attributesAreValid()&&(this.render(),this.setRemainingWidthValue(!1),this.render(),this.listenKey(),this.debug&&this.log())}init(){this.attributesAreValid()&&(this.columns=this.getAttribute("columns")||this.columns,this.gridWidth=this.getAttribute("grid-width")||this.gridWidth,this.columnWidth=this.getAttribute("column-width")||this.columnWidth,this.gapWidth=this.getAttribute("gap-width")||this.gapWidth,this.offsetX=this.getAttribute("offset-x")||this.offsetX,this.offsetY=this.getAttribute("offset-y")||this.offsetY,this.zIndex=this.getAttribute("z-index")||this.zIndex,this.color=this.getAttribute("color")||this.color,this.key=this.getAttribute("key")||this.key,this.debug="false"!==this.getAttribute("debug")&&"0"!==this.getAttribute("debug")&&null!==this.getAttribute("debug"))}attributesAreValid(){const a=this.getAttribute("columns"),b=this.getAttribute("grid-width"),c=this.getAttribute("column-width"),d=this.getAttribute("gap-width");let e=!0;return a||(this.warn(GridChecker.error.MISSING_COL_VAL),e=!1),!!a&&(isNaN(+a)||2>+a)&&(this.warn(GridChecker.error.INVALID_COL_VAL),e=!1),1<[b,c,d].filter(a=>null===a).length&&(this.warn(GridChecker.error.MISSING_WIDTH_VAL),e=!1),e}setProperty(a,b){switch(a){case"columns":this.columns=b,this.render(),this.setRemainingWidthValue(!0);break;case"grid-width":this.gridWidth=b,this.render(),this.setRemainingWidthValue(!0);break;case"column-width":this.columnWidth=b,this.render(),this.setRemainingWidthValue(!0);break;case"gap-width":this.gapWidth=b,this.render(),this.setRemainingWidthValue(!0);break;case"offset-x":this.offsetX=b;break;case"offset-y":this.offsetY=b;break;case"z-index":this.zIndex=b;break;case"color":this.color=b;break;case"key":this.key=b;break;case"debug":this.debug=null!==this.getAttribute("debug");default:this.warn(`GridChecker warning: unknown attribute "${a}".`);}this.debug&&this.log(),this.render()}setRemainingWidthValue(a){if(a){if(!this.attributesAreValid)return;this.getAttribute("grid-width")||(this.gridWidth=null),this.getAttribute("column-width")||(this.columnWidth=null),this.getAttribute("gap-width")||(this.gapWidth=null)}this.gridWidth||(this.gridWidth=this.getComputedWidthValueFromClientRect("grid-width")),this.columnWidth||(this.columnWidth=this.getComputedWidthValueFromClientRect("column-width")),this.gapWidth||(this.gapWidth=this.getComputedWidthValueFromClientRect("gap-width"))}render(){this.shadow.innerHTML=`
            <style>
                ${this.getStyle()}
            </style>
            <div class="column-container">
                ${this.getTemplateColumns()}
            </div>
        `,this.debug&&(this.renderAmount+=1,console.log(`rendered: ${this.renderAmount}`))}getComputedWidthValueFromClientRect(a){var b,c,d,e,f,g,h,i;const j=+this.columns;if("grid-width"===a){const a=+(null===(b=this.shadow.querySelector(".column-container div"))||void 0===b?void 0:b.getBoundingClientRect().width),e=+(null===(c=this.shadow.querySelector(".column-container div"))||void 0===c?void 0:c.getBoundingClientRect().right),f=+(null===(d=this.shadow.querySelector(".column-container div:nth-child(2)"))||void 0===d?void 0:d.getBoundingClientRect().left);return`${j*a+(j-1)*(f-e)}px`}if("gap-width"===a){const a=+(null===(e=this.shadow.querySelector(".column-container"))||void 0===e?void 0:e.getBoundingClientRect().width),b=+(null===(f=this.shadow.querySelector(".column-container div"))||void 0===f?void 0:f.getBoundingClientRect().width);return`${(a-j*b)/(j-1)}px`}if("column-width"===a){const a=+(null===(g=this.shadow.querySelector(".column-container"))||void 0===g?void 0:g.getBoundingClientRect().width),b=+(null===(h=this.shadow.querySelector(".column-container div"))||void 0===h?void 0:h.getBoundingClientRect().right),c=+(null===(i=this.shadow.querySelector(".column-container div:nth-child(2)"))||void 0===i?void 0:i.getBoundingClientRect().left);return`${(a-(j-1)*(c-b))/j}px`}return"0px"}listenKey(){window.addEventListener("keydown",a=>{a.key.toLowerCase()===this.key.toLowerCase()&&this.toggleAttribute("hidden")})}getTemplateColumns(){let a="";for(let b=0;b<+this.columns;b++)a+="<div></div>";return a}getStyle(){return`
            :host {
                display: block;
                position: fixed;
                top: 0;
                left: 0;
                z-index: ${this.zIndex};
                width: 100%;
                height: 100%;
            }
            :host([hidden]) { display: none; }
            .column-container {
                position: relative;
                top: ${this.offsetY};
                left: ${this.offsetX};
                width: ${this.gridWidth};
                height: 100%;
                margin: auto;
                font-size: 0;
            }
            .column-container div {
                display: inline-block;
                width: ${this.columnWidth};
                height: 100%;
                background: ${this.color};
            }
            .column-container div:not(:last-of-type) {
                margin-right: ${this.gapWidth};
            }
        `}createElement(a){const b=document.createElement("grid-checker"),c=a.target||document.body;a.columns&&b.setAttribute("columns",a.columns),a.gridWidth&&b.setAttribute("grid-width",a.gridWidth),a.columnWidth&&b.setAttribute("column-width",a.columnWidth),a.gapWidth&&b.setAttribute("gap-width",a.gapWidth),a.offsetX&&b.setAttribute("offset-x",a.offsetX),a.offsetY&&b.setAttribute("offset-y",a.offsetY),a.zIndex&&b.setAttribute("z-index",a.zIndex),a.color&&b.setAttribute("color",a.color),a.key&&b.setAttribute("key",a.key),a.debug&&b.setAttribute("debug",a.debug),c.appendChild(b),c!==document.body&&(b.style.top=`${c.getBoundingClientRect().top}px`,b.style.height=`${c.getBoundingClientRect().height}px`,window.addEventListener("scroll",()=>b.style.top=`${c.getBoundingClientRect().top}px`))}log(){console.table({columns:{value:this.columns,"getAttribute()":this.getAttribute("columns")},gridWidth:{value:this.gridWidth,"getAttribute()":this.getAttribute("grid-width")},columnWidth:{value:this.columnWidth,"getAttribute()":this.getAttribute("column-width")},gapWidth:{value:this.gapWidth,"getAttribute()":this.getAttribute("gap-width")},offsetX:{value:this.offsetX,"getAttribute()":this.getAttribute("offset-x")},offsetY:{value:this.offsetY,"getAttribute()":this.getAttribute("offset-y")},zIndex:{value:this.zIndex,"getAttribute()":this.getAttribute("z-index")},color:{value:this.color,"getAttribute()":this.getAttribute("color")},key:{value:this.key,"getAttribute()":this.getAttribute("key")},debug:{value:this.debug,"getAttribute()":this.getAttribute("debug")}}),console.log(this)}warn(a){console.warn("%c  ",`background: ${this.color}`,a,this),this.debug&&this.log()}}GridChecker.error={MISSING_COL_VAL:"GridChecker warning: missing value for the attribute: columns (number of columns).",MISSING_WIDTH_VAL:"GridChecker warning: missing width value(s). At least two of the following attributes must be set: grid-width, column-width, gap-width.",INVALID_COL_VAL:"GridChecker warning: integer >= 2 is expected for attribute \"columns\" value.",UNKNOWN_ATTR:"GridChecker warning: unknown attribute."},GridChecker.attributes=["columns","grid-width","column-width","gap-width","offset-x","offset-y","z-index","color","key"],customElements.define("grid-checker",GridChecker);