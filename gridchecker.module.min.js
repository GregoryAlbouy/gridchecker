export class GridChecker extends HTMLElement{constructor(a){super(),this.columns=null,this.gridWidth=null,this.columnWidth=null,this.gapWidth=null,this.offsetX="0",this.offsetY="0",this.zIndex="1000000",this.color="rgba(200, 50, 200, .4)",this.key="g",this.debug=!1,this.isListeningToAttributes=!1,this.renderAmount=0,this.html=this,this.shadow=this.attachShadow({mode:"open"}),a&&this.createElement(a)}static get observedAttributes(){return GridChecker.attributes}attributeChangedCallback(a,b,c){this.isListeningToAttributes&&this.attributesAreValid()&&this.setProperty(a,c)}connectedCallback(){this.init(),this.render(),this.setRemainingWidthValue(!1),this.render(),this.listenKey(),this.isListeningToAttributes=!0,this.debug&&this.log()}init(){this.attributesAreValid()&&(this.columns=Math.floor(+this.getAttribute("columns"))||this.columns,this.gridWidth=this.getAttribute("grid-width")||this.gridWidth,this.columnWidth=this.getAttribute("column-width")||this.columnWidth,this.gapWidth=this.getAttribute("gap-width")||this.gapWidth,this.offsetX=this.getAttribute("offset-x")||this.offsetX,this.offsetY=this.getAttribute("offset-y")||this.offsetY,this.zIndex=this.getAttribute("z-index")||this.zIndex,this.color=this.getAttribute("color")||this.color,this.key=this.getAttribute("key")||this.key,this.debug="false"!==this.getAttribute("debug")&&"0"!==this.getAttribute("debug")&&null!==this.getAttribute("debug"))}attributesAreValid(){const a=this.getAttribute("columns"),b=this.getAttribute("grid-width"),c=this.getAttribute("column-width"),d=this.getAttribute("gap-width");let e=!0;return a||(this.warn(GridChecker.error.MISSING_COL_VAL),e=!1),!!a&&(isNaN(+a)||2>+a)&&(this.warn(GridChecker.error.INVALID_COL_VAL),e=!1),1<[b,c,d].filter(a=>null===a).length&&(this.warn(GridChecker.error.MISSING_WIDTH_VAL),e=!1),e}setProperty(a,b){var c=Math.floor;"columns"===a?(this.columns=c(+b),this.render(),this.setRemainingWidthValue(!0)):"grid-width"===a?(this.gridWidth=b,this.render(),this.setRemainingWidthValue(!0)):"column-width"===a?(this.columnWidth=b,this.render(),this.setRemainingWidthValue(!0)):"gap-width"===a?(this.gapWidth=b,this.render(),this.setRemainingWidthValue(!0)):"offset-x"===a?this.offsetX=b:"offset-y"===a?this.offsetY=b:"z-index"===a?this.zIndex=b:"color"===a?this.color=b:"key"===a?this.key=b:"debug"===a?this.debug="false"!==this.getAttribute("debug")&&"0"!==this.getAttribute("debug")&&null!==this.getAttribute("debug"):this.warn(`GridChecker warning: unknown attribute "${a}".`);this.debug&&this.log(),this.render()}setRemainingWidthValue(a){if(a){if(!this.attributesAreValid)return;this.getAttribute("grid-width")||(this.gridWidth=null),this.getAttribute("column-width")||(this.columnWidth=null),this.getAttribute("gap-width")||(this.gapWidth=null)}this.gridWidth||(this.gridWidth=this.getComputedWidthValueFromClientRect("grid-width")),this.columnWidth||(this.columnWidth=this.getComputedWidthValueFromClientRect("column-width")),this.gapWidth||(this.gapWidth=this.getComputedWidthValueFromClientRect("gap-width"))}render(){this.shadow.innerHTML=`
            <style>
                ${this.getStyle()}
            </style>
            <div class="column-container">
                ${this.getTemplateColumns()}
            </div>
        `,this.debug&&(this.renderAmount+=1,console.log(`rendered: ${this.renderAmount}`))}getComputedWidthValueFromClientRect(a){var b;const c=this.shadow.querySelector(".column-container"),d=null===c||void 0===c?void 0:c.querySelector("div"),e=+this.columns,f=+(null===c||void 0===c?void 0:c.getBoundingClientRect().width),g=+(null===d||void 0===d?void 0:d.getBoundingClientRect().width),h=+(null===(b=null===c||void 0===c?void 0:c.querySelector("div:nth-child(2)"))||void 0===b?void 0:b.getBoundingClientRect().left)-+(null===d||void 0===d?void 0:d.getBoundingClientRect().right);return{"grid-width":`${e*g+(e-1)*h}px`,"column-width":`${(f-(e-1)*h)/e}px`,"gap-width":`${(f-e*g)/(e-1)}px`}[a]}listenKey(){window.addEventListener("keydown",a=>{a.key.toLowerCase()===this.key.toLowerCase()&&this.toggleAttribute("hidden")})}getTemplateColumns(){return[...Array(this.columns)].map(()=>"<div></div>").join("")}getStyle(){return`
            :host {
                display: block;
                position: fixed;
                top: 0;
                left: 0;
                z-index: ${this.zIndex};
                width: 100%;
                height: 100%;
            }
            :host([hidden]) { display: none; }
            .column-container {
                position: relative;
                top: ${this.offsetY};
                left: ${this.offsetX};
                width: ${this.gridWidth};
                height: 100%;
                margin: auto;
                font-size: 0;
            }
            .column-container div {
                display: inline-block;
                width: ${this.columnWidth};
                height: 100%;
                background: ${this.color};
            }
            .column-container div:not(:last-of-type) {
                margin-right: ${this.gapWidth};
            }
        `}createElement(a){const b=document.createElement("grid-checker"),c=a.target||document.body;a.columns&&b.setAttribute("columns",a.columns),a.gridWidth&&b.setAttribute("grid-width",a.gridWidth),a.columnWidth&&b.setAttribute("column-width",a.columnWidth),a.gapWidth&&b.setAttribute("gap-width",a.gapWidth),a.offsetX&&b.setAttribute("offset-x",a.offsetX),a.offsetY&&b.setAttribute("offset-y",a.offsetY),a.zIndex&&b.setAttribute("z-index",a.zIndex),a.color&&b.setAttribute("color",a.color),a.key&&b.setAttribute("key",a.key),a.debug&&b.setAttribute("debug",a.debug),c.appendChild(b),c!==document.body&&(b.style.top=`${c.getBoundingClientRect().top}px`,b.style.height=`${c.getBoundingClientRect().height}px`,window.addEventListener("scroll",()=>b.style.top=`${c.getBoundingClientRect().top}px`)),this.html=b}log(){console.table({columns:{value:this.columns,"getAttribute()":this.getAttribute("columns")},gridWidth:{value:this.gridWidth,"getAttribute()":this.getAttribute("grid-width")},columnWidth:{value:this.columnWidth,"getAttribute()":this.getAttribute("column-width")},gapWidth:{value:this.gapWidth,"getAttribute()":this.getAttribute("gap-width")},offsetX:{value:this.offsetX,"getAttribute()":this.getAttribute("offset-x")},offsetY:{value:this.offsetY,"getAttribute()":this.getAttribute("offset-y")},zIndex:{value:this.zIndex,"getAttribute()":this.getAttribute("z-index")},color:{value:this.color,"getAttribute()":this.getAttribute("color")},key:{value:this.key,"getAttribute()":this.getAttribute("key")},debug:{value:this.debug,"getAttribute()":this.getAttribute("debug")}}),console.log(this)}warn(a){console.warn("%c  ",`background: ${this.color}`,a,this),this.debug&&this.log()}}GridChecker.error={MISSING_COL_VAL:"GridChecker warning: missing value for the attribute: columns (number of columns).",MISSING_WIDTH_VAL:"GridChecker warning: missing width value(s). At least two of the following attributes must be set: grid-width, column-width, gap-width.",INVALID_COL_VAL:"GridChecker warning: integer >= 2 is expected for attribute \"columns\" value.",UNKNOWN_ATTR:"GridChecker warning: unknown attribute."},GridChecker.attributes=["columns","grid-width","column-width","gap-width","offset-x","offset-y","z-index","color","key"],customElements.define("grid-checker",GridChecker);